import java.util.*;

class Solution {
    public int[] solution(int brown, int yellow) {
        //먼저, 가로와 세로의 수를 담을 배열 생성
        int[] answer = new int[2];
        
        /* 브라운과 옐로우를 더해서 그 합을 구하기 (즉 all의 값이 될 수 있는 경우의 수 -> all의 약수 조합을 구해주면됨)
         - all이 8인 경우 8의 약수인 (1,8) (2,4) (4,2) (8, 1) 이 될 수 있음 
        */
        int all = brown + yellow;
        
        //세로를 row, 가로를 col이라고 할때, row와 col을 만들어주기
        // 가로가 더 커야하기 때문에 세로를 i로 두고 col을 all/row로 둠 !
        for(int i=1; i<=all; i++) {
            int col = all / row;
            int row = i;
        
        //갈색은 무조건 테두리 ! 노란색은 가로로 두개, 세로로 두개씩 갈색이 둘러싸고 있어서 그것을 빼주어 곱하면 yellow가 되어야함
        //사실 이부분이 이해가 안돼요 ....
        if((row-2) * (col-2) == yellow) {
            answer[0] = col;
            answer[1] = row;
            return answer;
        }
        }
        return answer;
    }
}
